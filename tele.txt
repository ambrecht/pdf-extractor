ControlPanel.js:

import React, { useState } from 'react';

const ControlPanel = ({
  handleNewParagraph,
  handleIntervalToggle,
  handleNextClick,
  handlePrevClick,
  wpm,
  setWpm,
  time,
  intervalIsRunning,
  isLinear,
  setIsLinear,
  wordCount,
  setFontSize,
  setFontColor,
}) => {
  const [isVisible, setIsVisible] = useState(true);
  return (
    <div className="relative">
      <button
        onClick={() => setIsVisible(!isVisible)}
        className="absolute top-0 right-0 bg-gray-500 text-white p-2"
      >
        {isVisible ? 'Hide' : 'Show'}
      </button>
      {isVisible && (
        <div className="bg-white p-4 shadow-md space-y-4 sm:space-y-0">
          <div className="bg-white p-4 shadow-md">
            <div className="flex flex-wrap justify-center space-x-2">
              <button
                onClick={handleNewParagraph}
                className="text-lg p-2 rounded bg-blue-500 text-white hover:bg-blue-400"
              >
                New Paragraph
              </button>
              <button
                onClick={handleIntervalToggle}
                className="text-lg p-2 rounded bg-blue-500 text-white hover:bg-blue-400"
              >
                {intervalIsRunning ? 'Stop Interval' : 'Start Interval'}
              </button>
              <button
                onClick={() => setIsLinear(!isLinear)}
                className="text-lg p-2 rounded bg-blue-500 text-white hover:bg-blue-400"
              >
                {isLinear ? 'Deactivate Linear' : 'Activate Linear'}
              </button>
              <button
                onClick={handlePrevClick}
                className="text-lg p-2 rounded bg-green-500 text-white hover:bg-green-400"
              >
                Zurück
              </button>
              <button
                onClick={handleNextClick}
                className="text-lg p-2 rounded bg-green-500 text-white hover:bg-green-400"
              >
                Vor
              </button>
              <label className="text-lg p-2">Words per Minute:</label>
              <input
                type="number"
                min="50"
                max="1000"
                value={wpm}
                onChange={(e) => setWpm(parseInt(e.target.value))}
                className="text-lg p-2 border rounded"
              />
              <h1 className="text-lg p-2 rounded bg-green-500 text-white hover:bg-green-400">
                {time} Sekunden bei {wordCount} Wörtern
              </h1>
            </div>
            <label className="text-lg p-2">Font Size:</label>
            <select
              onChange={(e) => setFontSize(e.target.value)}
              className="text-lg p-2 border rounded"
            >
              <option value="text-5xl">Large</option>
              <option value="text-3xl">Medium</option>
              <option value="text-xl">Small</option>
            </select>

            <label className="text-lg p-2">Font Color:</label>
            <input
              type="color"
              onChange={(e) => setFontColor(e.target.value)}
              className="text-lg p-2 border rounded"
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default ControlPanel;


index.js:

import React, { useState } from 'react';

import useRandomParagraph from '../../hooks/useRandomParagraph';
import HistoryTable from '../historyTable';
import Navigation from './Navigation';
import UploadForm from './uploadForm';
import ControlPanel from './ControlPanel';

const Teleprompter = ({ data }) => {
  const handleResponse = (response) => {
    setResponseData(response);
  };
  const [responseData, setResponseData] = useState(null);
  const [showUpload, setShowUpload] = useState(false);
  const [showControlPanel, setShowControlPanel] = useState(false);
  const {
    paragraphs,
    handleNewParagraph,
    handleIntervalToggle, // Diese Funktion wird definiert
    handleNextClick,
    handlePrevClick,
    wpm,
    setWpm,
    time,
    intervalIsRunning,
    isLinear,
    setIsLinear,
    wordCount,
    progress,
    fontSize,
    setFontSize,
    fontColor,
    setFontColor,
    history,
  } = useRandomParagraph(data);
  return (
    <div className="bg-black min-h-screen flex flex-col sm:justify-center sm:items-center">
      <Navigation
        setShowUpload={setShowUpload}
        setShowControlPanel={setShowControlPanel}
        showUpload={showUpload}
        showControlPanel={showControlPanel}
      />
      {showUpload && <UploadForm onResponse={handleResponse} />}
      {showControlPanel && (
        <ControlPanel
          handleNewParagraph={handleNewParagraph}
          handleIntervalToggle={handleIntervalToggle}
          handleNextClick={handleNextClick}
          handlePrevClick={handlePrevClick}
          wpm={wpm}
          setWpm={setWpm}
          time={time}
          intervalIsRunning={intervalIsRunning}
          isLinear={isLinear}
          setIsLinear={setIsLinear}
          wordCount={wordCount}
          setFontSize={setFontSize}
          setFontColor={setFontColor}
        />
      )}
      {responseData && <div>Response erhalten</div>}
    </div>
  );
};

export default Teleprompter;


Navigation.js:

import React from 'react';
// Navigation.js
const Navigation = ({
  setShowUpload,
  setShowControlPanel,
  showUpload,
  showControlPanel,
}) => (
  <div className="bg-gray-800 p-4 flex justify-between items-center">
    <button
      onClick={() => setShowUpload(!showUpload)}
      className="bg-blue-500 text-white p-2 rounded hover:bg-blue-400"
    >
      Upload
    </button>
    <button
      onClick={() => setShowControlPanel(!showControlPanel)}
      className="bg-green-500 text-white p-2 rounded hover:bg-green-400"
    >
      Control Panel
    </button>
  </div>
);

export default Navigation;


ParagraphDisplay.js:

import React, { useEffect, useRef } from 'react';
import scrollIntoViewIfNeeded from 'scroll-into-view-if-needed';
import { cleanText } from '../../utils/cleanText';

const ParagraphDisplay = ({
  paragraphs,
  progress,
  time,
  fontSize,
  fontColor,
}) => {
  const adjustedProgress = progress * (time / (time - 1));
  const targetCharRef = useRef(null);

  useEffect(() => {
    if (targetCharRef.current) {
      scrollIntoViewIfNeeded(targetCharRef.current, {
        scrollMode: 'if-needed',
        behavior: 'smooth',
        block: 'center',
        inline: 'center',
      });
    }
  }, [adjustedProgress]);

  return (
    <div className="overflow-y-screen h-screen w-screen flex-grow">
      {cleanText(paragraphs).map((paragraph, idx) => (
        <p
          key={idx}
          className={`${fontSize} font-semibold text-center my-8 mx-10 leading-relaxed`}
          style={{ color: idx === 1 ? fontColor : 'gray' }}
        >
          {paragraph.split('').map((char, charIdx) => {
            const charProgress = (charIdx / paragraph.split('').length) * 100;
            const isTargetChar = idx === 1 && charProgress < adjustedProgress;

            return (
              <span
                ref={isTargetChar ? targetCharRef : null}
                key={charIdx}
                style={{
                  color: isTargetChar ? 'white' : 'gray',
                }}
              >
                {char}
              </span>
            );
          })}
        </p>
      ))}
    </div>
  );
};

export default ParagraphDisplay;


uploadForm.js:

import React, { useState } from 'react';
import axios from 'axios';

const UploadPDF = ({ onResponse }) => {
  const [file, setFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [response, setResponse] = useState(null);

  const handleFileChange = (e) => {
    setFile(e.target.files[0]);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    const formData = new FormData();
    formData.append('file', file);

    try {
      const res = await axios.post('/api/test', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      setResponse(res.data);
      onResponse(res.data);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <form onSubmit={handleSubmit}>
        <input type="file" onChange={handleFileChange} />
        <button type="submit">Upload PDF</button>
      </form>
      {loading && <p>Uploading...</p>}
      {error && <p>Error: {error}</p>}
      {response && <p>Response: Das Ding ging durch!</p>}
    </div>
  );
};

export default UploadPDF;


