ControlPanel.js:

import React from 'react';
import { useSelector } from 'react-redux';
import useRandomParagraph from '../../hooks/useRandomParagraph';

const ControlPanel = () => {
  const response = useSelector((state) => state.upload.response);

  const {
    wpm,
    setWpm,
    paragraphs,
    index,
    time,
    intervalIsRunning,
    isLinear,
    wordCount,
    progress,
    elapsedTime,
    intervalProgress,
    updateIndex,
    updateTeleprompterData,
    toggleIntervalRunning,
    toggleLinearMode,
    setWordCount,
    setProgress,
    handleNewParagraph,
    handleNextClick,
    handlePrevClick,
    updateTeleprompterDataHandler,
  } = useRandomParagraph(response);

  return (
    <div className="relative bg-white p-4 shadow-md">
      <div className="flex flex-wrap justify-center space-x-2">
        <div className="bg-white p-4 shadow-md">
          <div className="flex flex-wrap justify-center space-x-2">
            <button
              onClick={handleNewParagraph}
              className="text-lg p-2 rounded bg-blue-500 text-white hover:bg-blue-400"
            >
              New Paragraph
            </button>
            <button
              onClick={toggleIntervalRunning}
              className="text-lg p-2 rounded bg-blue-500 text-white hover:bg-blue-400"
            >
              {intervalIsRunning ? 'Stop Interval' : 'Start Interval'}
            </button>
            <button
              onClick={toggleLinearMode}
              className="text-lg p-2 rounded bg-blue-500 text-white hover:bg-blue-400"
            >
              {isLinear ? 'Deactivate Linear' : 'Activate Linear'}
            </button>
            <button
              onClick={handlePrevClick}
              className="text-lg p-2 rounded bg-green-500 text-white hover:bg-green-400"
            >
              Zurück
            </button>
            <button
              onClick={handleNextClick}
              className="text-lg p-2 rounded bg-green-500 text-white hover:bg-green-400"
            >
              Vor
            </button>
            <label className="text-lg p-2">Words per Minute:</label>
            <input
              type="number"
              min="50"
              max="1000"
              value={wpm}
              onChange={(e) => setWpm(parseInt(e.target.value))}
              className="text-lg p-2 border rounded"
            />
            <h1 className="text-lg p-2 rounded bg-green-500 text-white hover:bg-green-400">
              {time} Sekunden bei {wordCount} Wörtern
            </h1>
          </div>
          <select>
            <option value="text-5xl">Large</option>
            <option value="text-3xl">Medium</option>
            <option value="text-xl">Small</option>
          </select>
        </div>
      </div>
    </div>
  );
};

export default ControlPanel;


index.js:

import React from 'react';
import { useSelector } from 'react-redux';
import {
  selectControlPanelVisible,
  selectUploadFormVisible,
} from '../../store/navigationSlice';
import Navigation from './Navigation';
import UploadForm from './UploadForm'; // Ensure the capitalization is correct
import ControlPanel from './ControlPanel';
import ParagraphDisplay from './ParagraphDisplay';

const Teleprompter = () => {
  const controlPanelVisible = useSelector(selectControlPanelVisible);
  const uploadFormVisible = useSelector(selectUploadFormVisible);
  const file = useSelector((state) => state.upload.file);
  return (
    <div className="bg-black min-h-screen flex flex-col sm:justify-center sm:items-center">
      <Navigation />
      {controlPanelVisible && <ControlPanel />}
      {uploadFormVisible && <UploadForm />}

      {file && <div>Response erhalten</div>}
      {file && <ParagraphDisplay />}
    </div>
  );
};

export default Teleprompter;


Navigation.js:

import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { selectResponse } from '../../store/uploadSlice';
import {
  toggleControlPanel,
  toggleUploadForm,
  selectControlPanelVisible,
  selectUploadFormVisible,
} from '../../store/navigationSlice';

const Navigation = () => {
  const dispatch = useDispatch();
  const response = useSelector(selectResponse);

  const handleUploadFormToggle = () => {
    dispatch(toggleUploadForm());
  };

  const handleControlPanelToggle = () => {
    dispatch(toggleControlPanel());
  };

  return (
    <div className="bg-gray-800 p-4 flex justify-between items-center">
      <button
        onClick={handleUploadFormToggle}
        className={`bg-blue-500 text-white p-2 rounded hover:bg-blue-400`}
      >
        Upload
      </button>
      {response.length > 0 && (
        <button
          onClick={handleControlPanelToggle}
          className={`bg-green-500 text-white p-2 rounded hover:bg-green-400 `}
        >
          Control Panel
        </button>
      )}
    </div>
  );
};

export default Navigation;


ParagraphDisplay.js:

import React, { useEffect, useRef } from 'react';
import { useSelector } from 'react-redux';
import scrollIntoViewIfNeeded from 'scroll-into-view-if-needed';
import { cleanText } from '../../utils/cleanText';

const ParagraphDisplay = () => {
  const paragraphs = useSelector((state) => state.teleprompter.paragraphs);
  const progress = useSelector((state) => state.teleprompter.progress);
  const time = useSelector((state) => state.teleprompter.time);

  const adjustedProgress = progress * (time / (time - 1));
  const targetCharRef = useRef(null);

  useEffect(() => {
    if (targetCharRef.current) {
      scrollIntoViewIfNeeded(targetCharRef.current, {
        scrollMode: 'if-needed',
        behavior: 'smooth',
        block: 'center',
        inline: 'center',
      });
    }
  }, [adjustedProgress]);

  return (
    <div className="overflow-y-screen h-screen w-screen flex-grow">
      {cleanText(paragraphs).map((paragraph, idx) => (
        <p
          key={idx}
          className={`16 font-semibold text-center my-8 mx-10 leading-relaxed`}
          style={{ color: idx === 1 ? 'red' : 'gray' }}
        >
          {paragraph.split('').map((char, charIdx) => {
            const charProgress = (charIdx / paragraph.split('').length) * 100;
            const isTargetChar = idx === 1 && charProgress < adjustedProgress;

            return (
              <span
                ref={isTargetChar ? targetCharRef : null}
                key={charIdx}
                style={{
                  color: isTargetChar ? 'white' : 'gray',
                }}
              >
                {char}
              </span>
            );
          })}
        </p>
      ))}
    </div>
  );
};

export default ParagraphDisplay;


uploadForm.js:

import React, { useCallback, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { setFile, uploadFile } from '../../store/uploadSlice';

import { path } from 'ramda';

const UploadPDF = () => {
  const dispatch = useDispatch();
  const file = useSelector((state) => path(['upload', 'file'], state));
  const loading = useSelector((state) => path(['upload', 'loading'], state));
  const error = useSelector((state) => path(['upload', 'error'], state));

  const handleFileChange = useCallback(
    (e) => {
      if (e.target.files[0]) {
        dispatch(setFile(e.target.files[0]));
      }
    },
    [dispatch],
  );

  const handleSubmit = useCallback(
    (e) => {
      e.preventDefault();
      dispatch(uploadFile(file));
    },
    [file, dispatch],
  );

  return (
    <div>
      <form onSubmit={handleSubmit}>
        <input type="file" onChange={handleFileChange} />
        <button type="submit">Upload</button>
      </form>
      {loading && <p>Uploading...</p>}
      {error && <p>Error: {error}</p>}
      {file && <p>Response: Das Ding ging durch!</p>}
    </div>
  );
};

export default UploadPDF;


