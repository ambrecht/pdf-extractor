wie kann ich diese useEffect hook in diesem reducer slice verwenden: 

useeffect hook:   useEffect(() => {
    if (index !== null) {
      const selectedParagraphs = [
        data[index - 1]?.paragraph || '',
        data[index]?.paragraph || '',
        data[index + 1]?.paragraph || '',
      ];
      setParagraphs(selectedParagraphs);
      setTime(estimateReadingTime(selectedParagraphs[1], wpm));
      setWordCount(countWords(selectedParagraphs[1]));
      setProgress(0); // Fortschritt zurücksetzen, wenn sich der mittlere Absatz ändert
    }
  }, [index, wpm, data]);

store slice: import { createSlice } from '@reduxjs/toolkit';
import { assoc } from 'ramda';
import { uploadSelectors } from './uploadSlice';
import countWords from '../utils/wordCount';
import estimateReadingTime from '../utils/readingTime';

const teleprompterSlice = createSlice({
  name: 'teleprompter',
  initialState: {
    wpm: 140,
    paragraphs: [],
    index: 0,
    time: 0,
    intervalIsRunning: false,
    isLinear: false,
    wordCount: 0,
    progress: 0,
  },
  reducers: {
    setWpm: (state, action) => assoc('wpm', action.payload, state),
    setParagraphs: (state, action) =>
      assoc('paragraphs', action.payload, state),
    setIndex: (state, action) => assoc('index', action.payload, state),
    setTime: (state, action) => assoc('time', action.payload, state),
    toggleIntervalRunning: (state) =>
      assoc('intervalIsRunning', !state.intervalIsRunning, state),
    toggleLinearMode: (state) => assoc('isLinear', !state.isLinear, state),
    setWordCount: (state, action) => assoc('wordCount', action.payload, state),
    setProgress: (state, action) => assoc('progress', action.payload, state),
    updateParagraphs: (state, action) => {
      // Zugriff auf die response aus dem uploadSlice
      const response = uploadSelectors.selectResponse(state);
      if (response && response.length >= 3) {
        // Setzen Sie die drei aktuellen Absätze aus der response
        const selectedParagraphs = [
          response[action.payload - 1]?.paragraph || '',
          response[action.payload]?.paragraph || '',
          response[action.payload + 1]?.paragraph || '',
        ];
        state = assoc('paragraphs', selectedParagraphs, state);
        // Setzen Sie den Index auf action.payload
        state = assoc('index', action.payload, state);
        // Setzen Sie die Zeit und das Wortzählung basierend auf dem mittleren Absatz
        state = assoc(
          'time',
          estimateReadingTime(selectedParagraphs[1], state.wpm),
          state,
        );
        state = assoc('wordCount', countWords(selectedParagraphs[1]), state);
        // Setzen Sie den Fortschritt auf 0
        state = assoc('progress', 0, state);
      }
    },
  },
});

export const {
  setWpm,
  setParagraphs,
  setIndex,
  setTime,
  toggleIntervalRunning,
  toggleLinearMode,
  setWordCount,
  setProgress,
  updateParagraphs, // Exportieren Sie die neue Aktion
} = teleprompterSlice.actions;

export default teleprompterSlice.reducer;


schreibe den vollständigen code ganu dahin wo er hingehört lasse NICHTS aus. richte dich nach dieserguideline: Redux Store:
       Der Redux Store ist der zentrale Speicherort für den Zustand Ihrer Anwendung.
       Er enthält den globalen Zustand Ihrer Anwendung, der von verschiedenen Komponenten genutzt werden kann.
       Im Redux Store sollten Daten gespeichert werden, die von mehreren Komponenten benötigt werden und globalen Charakter haben.
       Zustandsänderungen im Redux Store werden durch Aktionen und Reducer behandelt.

   Hooks:
       Hooks sind Funktionen, die es Komponenten ermöglichen, React-Funktionen zu nutzen, die bisher nur in Klassenkomponenten verfügbar waren (z. B. Zustand mit useState, Nebeneffekte mit useEffect).
       Sie können eigene benutzerdefinierte Hooks erstellen, um Zustand oder Funktionalitäten zu abstrahieren und diese in verschiedenen Komponenten wiederverwenden zu können.
       Hooks sollten für die Verwaltung von Seiteneffekten wie API-Aufrufen, asynchronen Operationen oder anderen Nebeneffekten verwendet werden.
       Sie sollten auf den Redux Store zugreifen, um Zustandsänderungen auszulösen oder Informationen abzurufen, die für die Behandlung von Seiteneffekten benötigt werden.

   Komponenten:
       Komponenten sind die Bausteine Ihrer Benutzeroberfläche und sollten möglichst "dumm" gehalten werden, indem sie nur den Zustand anzeigen und auf Benutzerinteraktionen reagieren.
       Komponenten sollten idealerweise den Zustand nicht selbst verwalten, sondern diesen aus dem Redux Store oder Hooks abrufen.
       Sie sollten überwiegend das Aussehen und die Darstellung der Benutzeroberfläche übernehmen.
       Die meisten Logiken, insbesondere Seiteneffekte und Datenabfragen, sollten in Hooks ausgelagert werden.

Zusammenfassung der Aufgaben:

   Der Redux Store speichert den globalen Zustand der Anwendung und behandelt Zustandsänderungen durch Aktionen und Reducer.
   Hooks werden verwendet, um Seiteneffekte zu verwalten und Funktionalitäten zu abstrahieren, die von verschiedenen Komponenten wiederverwendet werden können.
   Komponenten sollten hauptsächlich die Benutzeroberfläche darstellen und den Zustand aus dem Redux Store oder Hooks abrufen, um auf Änderungen zu reagieren.

Durch diese klare Trennung wird der Code sauberer und leichter zu warten, da die Verantwortlichkeiten klar definiert sind und die Komponenten unabhängig voneinander arbeiten können.